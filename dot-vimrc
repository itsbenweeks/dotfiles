""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"    Ben Weeks's Dotfiles: .vimrc                                              "
"    - uses Vundle to manage and load plugins                               "
"                                                                              "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Pre-setup

set nocompatible                                        " Be iMproved
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/                      " Vundle, required

call vundle#begin(expand('~/.vim/bundle/'))             " Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Handle new html5 tags and properties
Plugin 'christoomey/vim-tmux-navigator'
" ~> Theming plugins
Plugin 'sjl/badwolf'
Plugin 'altercation/vim-colors-solarized'
" ~> Tagbar tag browser plugin
Plugin 'majutsushi/tagbar',      {'autoload' : {'filetypes' : ['python', 'ruby', 'javascript', 'css'] } }
Plugin 'vim-scripts/AutoTag',    {'autoload' : {'filetypes' : ['python', 'ruby', 'javascript', 'css'] } }
" ~> Vim Shell Plugin
Plugin 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
" ~> LSP Servers
Plugin 'dense-analysis/ale'
Plugin 'prabirshrestha/vim-lsp'
Plugin 'rhysd/vim-lsp-ale'
Plugin 'mattn/vim-lsp-settings'
" ~> Git statuses
Plugin 'tpope/vim-fugitive'
" ~> Syntastic error highlighting
Plugin 'scrooloose/syntastic', {'autoload' : {'filetypes' : ['ruby', 'javascript'] } }
" ~> Indentation gutters for HTML
Plugin 'nathanaelkane/vim-indent-guides', {'autoload' : {'filetypes' : ['html'] } }
" ~> Airline plugin
Plugin 'bling/vim-airline'
" ~> Python
"Plugin 'ehamberg/vim-cute-python', {'autoload' : {'filetypes' : ['python'] } }
Plugin 'klen/python-mode', {'autoload' : {'filetypes' : ['python'] } }
Plugin 'nvie/vim-flake8'
" ~> HTML and CSS Syntax plugins
Plugin 'othree/html5.vim.git', {'autoload' : {'filetypes' : ['html'] } }
" Add CSS3 syntax highlighting
Plugin 'hail2u/vim-css3-syntax', {'autoload' : {'filetypes' : ['css'] } }
" Highlight scss
Plugin 'cakebaker/scss-syntax.vim', {'autoload' : {'filetypes' : ['scss'] } }
" leader V toggles
Plugin 'mikewest/vimroom', {'autoload' : {'filetypes' : ['markdown'] } }
" ReStructured Text (.rst files)
Plugin 'Rykka/riv.vim'

" ~> Nerd commenter
Plugin 'scrooloose/nerdcommenter'
" ~> Surround
Plugin 'tpope/vim-surround'

" ~> Auto-Close
Plugin 'spf13/vim-autoclose'

" ~> Emmet
Plugin 'mattn/emmet-vim'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> End of Plugins
call vundle#end()
filetype plugin indent on                               " Vundle, required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> General
syntax on                                               " Use syntax highlighting
set history=1000                                        " minimum history recording
set title                                               " vim sets terminal title
set tabpagemax=50                                       " `vim -p file file file` ...
set encoding=utf-8                                      " Unicode by default
set dictionary=/usr/share/dict/words                    " i ctrl_x ctrl_k completion

set undofile                                            " save central undo files
set undodir=~/.vim/tmp/undo/
set backup                                              " enable backups
set backupdir=~/.vim/tmp/backup/

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Behaviors

set gdefault                                            " s/foo/bar/ => s/foo/bar/g

set backspace=indent,eol,start                          " erase autoindents, join lines
set wildmenu                                            " vim internal tab-completion
set wildmode=list:longest

                                                        " Search behavior
set ignorecase                                          " ingnore UPPPER/lower case
set smartcase                                           " insensitive until you are
set incsearch                                           " search as characters are entered
set hlsearch                                            " highlight matches

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Visual Behaviors
set number                                              " Line # by default
set showcmd                                             " show command in status line

set lazyredraw                                          " redraw a/ macros or registers
set visualbell                                          " Flash screen not bell
set showmatch                                           " flash to the matching paren
set matchtime=2                                         " for 2 seconds (default 5)
set wrap                                                " Wrap long lines
set textwidth=80                                        " consider PEP8 by default
set scrolloff=2                                         " keep 2 lines between cursor and edge
set formatoptions=qn2                                   " Format comments gq
                                                        "   reconize numbered lists
                                                        "   No break lines after 1 letter word
set guifont=MesloLGS\ NF\ Regular:h11       " Make sure gVim uses a powerline font

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Tab behaviors
set tabstop=4                                           " 4 space tabs
set softtabstop=4
set shiftwidth=4
set expandtab                                           " turn tabs to spaces
set smarttab                                            " remember indent
set autoindent                                          " smart auto indenting

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Split behaviors
set splitbelow                                          " new hoz splits go below
set splitright                                          " new vert splits go right

" call vundle#begin(expand('~/.vim/bundle/'))

" Plugin 'christoomey/vim-tmux-navigator'

" call vundle#end()
                                                " Switch panes with ctrl + hjkl
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Style

match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'        " Highlight merge conflicts
set list listchars=tab:·\ ,trail:≁,nbsp:∝               " Highlight special characters
set showbreak=↪                                         " Mark lines that have been wrapped
" cpotions: aABceFs -- defaults
set cpo+=J                                              " Yank by sentence (2-space a/ period)

" call vundle#begin(expand('~/.vim/bundle/'))
" Plugin 'sjl/badwolf'
" Plugin 'altercation/vim-colors-solarized'
" call vundle#end()

set background=light
colorscheme badwolf
syntax enable

set fillchars=vert:│

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Leader key bindings     TODO: Change this!
let mapleader = " "                                     " <space> as leader ++
                                        " Strip whitespaces
"nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
                                        " select last selected or pasted thing
"nnoremap <leader>v V`]
                                        " edit vimrc in vert split
"nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr> "open vimrc for editing
                                        " set filetype to htmldjango
nnoremap <leader>h :setfiletype htmldjango<cr>
                                        " use 2-tab spaces
"nnoremap <leader>2 :call TStwo()<CR>
                                        " use 4-tab spaces
"nnoremap <leader>4 :call TSfour()<CR>
                                        " toggle set paste
"nnoremap <leader>p :set paste!<CR>
                                        " new hoz split
nnoremap <leader>w <C-w>v
                                        " new vert split
nnoremap <leader>- <C-w>s

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Tagbar tag browser
" call vundle#begin(expand('~/.vim/bundle/'))
" Plugin 'majutsushi/tagbar',      {'autoload' : {'filetypes' : ['python', 'ruby', 'javascript', 'css'] } }
" Plugin 'vim-scripts/AutoTag',    {'autoload' : {'filetypes' : ['python', 'ruby', 'javascript', 'css'] } }
" call vundle#end()
                                        " open tagbar, switch to it
nnoremap <leader>t :TagbarToggle<CR>
                                        " open tagbar, close when done
nnoremap <leader>T :TagbarOpenAutoClose<CR>

if (exists(":TagbarToggle"))
    " if tagbar is loaded
    " enable tagbar etension for airline
    let g:airline#extensions#tabline#enabled = 1
en

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> vimproc - execute shell in VIM
" call vundle#begin(expand('~/.vim/bundle/'))
" Plugin 'Shougo/vimproc.vim', {
"      \ 'build' : {
"      \     'windows' : 'tools\\update-dll-mingw',
"      \     'cygwin' : 'make -f make_cygwin.mak',
"      \     'mac' : 'make -f make_mac.mak',
"      \     'unix' : 'make -f make_unix.mak',
"      \    },
"      \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Git statuses
" Plugin 'tpope/vim-fugitive'
" call vundle#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Functions
function! TStwo()
    setlocal tabstop=2 softtabstop=2 shiftwidth=2
endfunction

function! TSfour()
    setlocal tabstop=4 softtabstop=4 shiftwidth=4
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Syntastic error highlighting
" call vundle#begin(expand('~/.vim/bundle/'))
" Plugin 'scrooloose/syntastic', {'autoload' : {'filetypes' : ['ruby', 'javascript'] } }
" call vundle#end()
                                        " Show syntastic error box
nnoremap <leader>e :lw<CR>
                                        " Hide syntastic error box
nnoremap <leader>E :lcl<CR>
let g:syntastic_check_on_open=1         " Don't check for errors until save
let g:syntastic_enable_signs=0         "no left of linenum signs
let g:syntastic_error_symbol=' ⧰'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_auto_jump=0 " Do not jump to first error on save/open
let g:syntastic_stl_format = '[%E{⧰: #%e l%fe}%B{, }%W{⚠: #%w %fw}]'
let g:syntastic_python_checker_args='-d C0301,E1101'
                            " E501 line too long
                            " E221 too much space before = (aligning ='s)
                            " E126 too many tabs after a continuation `\`

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Indentation gutters for HTML
" call vundle#begin(expand('~/.vim/bundle/'))
" Plugin 'nathanaelkane/vim-indent-guides', {'autoload' : {'filetypes' : ['html'] } }
" call vundle#end()
let g:indent_guides_start_level = 2                     " Show vert gutters in html files


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Airline
" call vundle#begin(expand('~/.vim/bundle/'))
" Plugin 'bling/vim-airline'
" call vundle#end()
let g:airline#extensions#tabline#enabled = 1
" when only one tab is open, show all of the open buffers
" user powerline patched fonts = no
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_alt_sep = '|'
" dict of configurably unicode symbols. mmmmmmmmmm
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> Python
" call vundle#begin(expand('~/.vim/bundle/'))
" Plugin 'ehamberg/vim-cute-python', {'autoload' : {'filetypes' : ['python'] } }
" Plugin 'klen/python-mode', {'autoload' : {'filetypes' : ['python'] } }
" Plugin 'nvie/vim-flake8'
" call vundle#end()

" Configuration for Python-mode
let g:pymode_quickfix_minheight = 5
let g:pymode_quickfix_maxheight = 12
let g:pymode_folding = 0
let g:pymode_breakpoint_bind = '<leader>b'
"let g:pymode_breakpoint_cmd = '' " blank for auto detect?
nnoremap <leader>l :PymodeLint<cr>
let g:pymode_lint_ignore = "E501,E221"
" error signs
let g:pymode_lint_todo_symbol = '⚔'
"let g:pymode_lint_error_symbol = '⚠'
let g:pymode_lint_error_symbol = '‼‼'
let g:pymode_lint_comment_symbol = '♲'
let g:pymode_rope_show_doc_bind = '<leader>d'
let g:pymode_rope_goto_definition_bind = '<leader>g'
"let g:pymode_rope_organize_imports_bind = '<C-c>ro' "default

" Movement
" [[,]] prev|next class/func
" [M,]M prv|next class/method
" aC Select a class. Ex: vaC, daC, yaC, caC
" iC Select inner class. Ex: viC, diC, yiC, ciC
" aM Select a function or method. Ex: vaM, daM, yaM, caM
" iM Select inner function or method. Ex: viM, diM, yiM, ciM

" TODO let g:pymode_virtualenv_path = $VIRTUAL_ENV


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Handle new html5 tags and properties
" call vundle#begin(expand('~/.vim/bundle/'))
" ~> HTML and CSS Syntax plugins
" Plugin 'othree/html5.vim.git', {'autoload' : {'filetypes' : ['html'] } }
" Add CSS3 syntax highlighting
" Plugin 'hail2u/vim-css3-syntax', {'autoload' : {'filetypes' : ['css'] } }
" Highlight scss
" Plugin 'cakebaker/scss-syntax.vim', {'autoload' : {'filetypes' : ['scss'] } }
" leader V toggles
" Plugin 'mikewest/vimroom', {'autoload' : {'filetypes' : ['markdown'] } }
" ReStructured Text (.rst files)
" Plugin 'Rykka/riv.vim'

" ~> Nerd commenter
" Plugin 'scrooloose/nerdcommenter'
" ~> Surround
" Plugin 'tpope/vim-surround'

" ~> Auto-Close
" Plugin 'spf13/vim-autoclose'

" ~> Emmet
" Plugin 'mattn/emmet-vim'
" call vundle#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ~> End of configuration
